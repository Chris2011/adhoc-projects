/* Copyright (C) 2013 Tim Boudreau

 Permission is hereby granted, free of charge, to any person obtaining a copy 
 of this software and associated documentation files (the "Software"), to 
 deal in the Software without restriction, including without limitation the 
 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
 sell copies of the Software, and to permit persons to whom the Software is 
 furnished to do so, subject to the following conditions:

 The above copyright notice and this permission notice shall be included in all 
 copies or substantial portions of the Software.

 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN 
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */
package com.timboudreau.adhoc.project;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import org.openide.filesystems.FileChooserBuilder;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileUtil;
import org.openide.util.ChangeSupport;

/**
 *
 * @author Tim Boudreau
 */
final class AdhocProjectWizardPanel extends javax.swing.JPanel implements DocumentListener, ActionListener, FocusListener {

    private final ChangeSupport supp = new ChangeSupport(this);

    @SuppressWarnings("LeakingThisInConstructor")
    public AdhocProjectWizardPanel() {
        initComponents();
        jTextField1.getDocument().addDocumentListener(this);
        jTextField1.addFocusListener(this);
        jButton1.addActionListener(this);
    }

    public void addChangeListener(ChangeListener listener) {
        supp.addChangeListener(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        supp.removeChangeListener(listener);
    }

    public FileObject getFileObject() {
        File f = new File(jTextField1.getText());
        if (f.exists()) {
            f = FileUtil.normalizeFile(f);
            return FileUtil.toFileObject(f);
        }
        return null;
    }

    void setFileObject(FileObject fo) {
        File f = FileUtil.toFile(fo);
        if (f == null) {
            f = new File(System.getProperty("user.home"));
        }
        try {
            jTextField1.setText(f.getCanonicalFile().getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(AdhocProjectWizardPanel.class.getName()).log(
                    Level.INFO, "Failed to set " + fo, ex);
        }
    }
    boolean prev;

    boolean hasValidFile() {
        FileObject fo = getFileObject();
        return prev = fo != null && fo.isFolder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jTextField1.setText(org.openide.util.NbBundle.getMessage(AdhocProjectWizardPanel.class, "AdhocProjectWizardPanel.jTextField1.text")); // NOI18N

        jLabel1.setLabelFor(jTextField1);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(AdhocProjectWizardPanel.class, "AdhocProjectWizardPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(AdhocProjectWizardPanel.class, "AdhocProjectWizardPanel.jButton1.text")); // NOI18N

        jLabel2.setForeground(java.awt.Color.red);
        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(AdhocProjectWizardPanel.class, "AdhocProjectWizardPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void change() {
        boolean old = prev;
        boolean nue = hasValidFile();
        if (!nue) {
            jLabel2.setText("File does not exist or is not a folder.");
        } else {
            jLabel2.setText(" ");
        }
        if (old != nue) {
            supp.fireChange();
        }
    }

    @Override
    public void insertUpdate(DocumentEvent de) {
        change();
    }

    @Override
    public void removeUpdate(DocumentEvent de) {
        change();
    }

    @Override
    public void changedUpdate(DocumentEvent de) {
        change();
    }

    @Override
    public void actionPerformed(ActionEvent ae) {
        File f = new FileChooserBuilder(AdhocProjectWizardPanel.class)
                .setDirectoriesOnly(true)
                .setTitle("Find Project Folder")
                .showOpenDialog();

        if (f != null) {
            try {
                jTextField1.setText(f.getCanonicalFile().getAbsolutePath());
            } catch (IOException ex) {
                Logger.getLogger(AdhocProjectWizardPanel.class.getName()).log(Level.INFO, "Bad file", ex);
            }
        }
    }

    @Override
    public void focusGained(FocusEvent fe) {
        jTextField1.selectAll();
    }

    @Override
    public void focusLost(FocusEvent fe) {
    }
}
